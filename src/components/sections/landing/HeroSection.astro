
// Import the necessary dependencies
// import { Image } from "astro:assets";
// import PrimaryCTA from "@components/ui/buttons/PrimaryCTA.astro";
// import SecondaryCTA from "@components/ui/buttons/SecondaryCTA.astro";
// import ReviewComponent from "@components/ui/blocks/ReviewComponent.astro";

//  Define props from Astro
// const {
//   title,
//   subTitle,
//   primaryBtn,
//   primaryBtnURL,
//   secondaryBtn,
//   secondaryBtnURL,
//   withReview,
//   avatars,
//   starCount,
//   rating,
//   reviews,
//   src,
//   alt
// } = Astro.props;

// // Define TypeScript interface for props
// interface Props {
//   title: string;
//   subTitle?: string;
//   primaryBtn?: string;
//   primaryBtnURL?: string;
//   secondaryBtn?: string;
//   secondaryBtnURL?: string;
//   withReview?: boolean;
//   avatars?: Array<string>;
//   starCount?: number;
//   rating?: string;
//   reviews?: string;
//   src?: any;
//   alt?: string;
// }
// ---

// <!-- Defining a grid container that holds all the content -->
// <section
//   class="mx-auto grid max-w-[85rem] gap-4 px-4 py-14 sm:px-6 md:grid-cols-2 md:items-center md:gap-8 lg:px-8 2xl:max-w-full"
// >
//   <!-- Title and description -->
//   <div>
//     <!-- Each h1 and p tag renders a portion of the title and subTitle defined above -->
//     <h1
//       class="block text-balance text-3xl font-bold tracking-tight text-neutral-800 dark:text-neutral-200 sm:text-4xl lg:text-6xl lg:leading-tight"
//     >
//       <!-- About Fragment: https://docs.astro.build/en/basics/astro-syntax/#fragments -->
//       <Fragment set:html={title} />
//     </h1>
//     {subTitle &&
//     <p
//       class="mt-3 text-pretty text-lg leading-relaxed text-neutral-700 dark:text-neutral-400 lg:w-4/5"
//     >
//       {subTitle}
//     </p>
//   }
//     <!-- Action Button Section: This section includes two CTAs with their own styles and URL -->
//     <div class="mt-7 grid w-full gap-3 sm:inline-flex">
//       {primaryBtn && 
//       <PrimaryCTA title={primaryBtn} url={primaryBtnURL} />
//       }
//       {secondaryBtn && 
//       <SecondaryCTA title={secondaryBtn} url={secondaryBtnURL} />
//       }
//     </div>

//     <!-- Review Section: This section presents avatars, review ratings and the number of reviews -->
//     { withReview ? (
//     <ReviewComponent avatars={avatars} starCount={starCount} rating={rating} reviews={reviews} />
//     ) : "" }

//   </div>
//   <!-- Hero Image Section -->
//   <div class="flex w-full">
//       <div class="top-12 overflow-hidden">
// 	{src && alt &&
// 	<Image
//         src={src}
//         alt={alt}
//         class="h-full w-full scale-110 object-cover object-center"
//         draggable={"false"}
//         loading={"eager"}
//         format={"avif"}
// 	 />
// 	}
//     </div>
//   </div>
// </section>


---
// Import the necessary dependencies
import { Image } from "astro:assets";
import type { ImageMetadata } from "astro";
import { Fragment } from 'astro';  // Fixed the Fragment import
import PrimaryCTA from "@components/ui/buttons/PrimaryCTA.astro";
import SecondaryCTA from "@components/ui/buttons/SecondaryCTA.astro";

// Define TypeScript interface for props
interface Props {
  title: string;
  subTitle?: string;
  primaryBtn?: string;
  primaryBtnURL?: string;
  secondaryBtn?: string;
  secondaryBtnURL?: string;
  images: Array<{
    src: ImageMetadata;
    alt: string;
  }>;
}

// Get all props with proper typing and validation
const { 
  title, 
  subTitle, 
  primaryBtn, 
  primaryBtnURL, 
  secondaryBtn, 
  secondaryBtnURL, 
  images 
} = Astro.props;

// Runtime validation
if (!images?.length) {
  throw new Error('At least one image is required for the carousel');
}
---

<section class="mx-auto grid max-w-[85rem] gap-4 px-4 py-14 sm:px-6 md:grid-cols-2 md:items-center md:gap-8 lg:px-8 2xl:max-w-full">
  <div>
    <h1 class="block text-balance text-3xl font-bold tracking-tight text-neutral-800 dark:text-neutral-200 sm:text-4xl lg:text-6xl lg:leading-tight">
      <Fragment>{title}</Fragment> <!-- Corrected Fragment usage -->
    </h1>

    {subTitle && (
      <p class="mt-3 text-pretty text-lg leading-relaxed text-neutral-700 dark:text-neutral-400 lg:w-4/5">
        {subTitle}
      </p>
    )}

    <div class="mt-7 grid w-full gap-3 sm:inline-flex">
      {primaryBtn && (
        <PrimaryCTA title={primaryBtn} url={primaryBtnURL} />
      )}
      {secondaryBtn && (
        <SecondaryCTA title={secondaryBtn} url={secondaryBtnURL} />
      )}
    </div>
  </div>

  <!-- Right column with image carousel -->
  <div class="relative flex w-full overflow-hidden rounded-lg">
    <div class="carousel relative h-[400px] w-full touch-pan-y">
      {images.map((image, index) => (
        <div 
          class={`carousel-slide absolute h-full w-full transition-opacity duration-500 ${index === 0 ? "opacity-100" : "opacity-0"}`}
          data-index={index}
          role="tabpanel"
          aria-label={`Slide ${index + 1} of ${images.length}`}
        >
          <Image
            src={image.src}
            alt={image.alt}
            class="h-full w-full scale-110 object-cover object-center"
            draggable={false}
            loading={index === 0 ? "eager" : "lazy"}
            format="avif"
          />
        </div>
      ))}
    </div>

    <!-- Navigation Buttons -->
    <button class="prev-slide absolute left-2 top-1/2 -translate-y-1/2 rounded-full bg-white/80 p-2 text-gray-800 shadow-lg transition-colors hover:bg-white focus:outline-none focus:ring-2 focus:ring-blue-500" aria-label="Previous slide">
      <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7" />
      </svg>
    </button>

    <button class="next-slide absolute right-2 top-1/2 -translate-y-1/2 rounded-full bg-white/80 p-2 text-gray-800 shadow-lg transition-colors hover:bg-white focus:outline-none focus:ring-2 focus:ring-blue-500" aria-label="Next slide">
      <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
      </svg>
    </button>

    <!-- Indicators -->
    <div class="absolute bottom-4 left-1/2 flex -translate-x-1/2 gap-2">
      {images.map((_, index) => (
        <button
          class={`carousel-indicator h-2 transition-all focus:outline-none focus:ring-2 focus:ring-blue-500 ${index === 0 ? "w-4 bg-white" : "w-2 bg-white/50"}`}
          data-index={index}
          role="tab"
          aria-label={`Go to slide ${index + 1}`}
          aria-selected={index === 0}
        />
      ))}
    </div>
  </div>
</section>

<script>
  let currentIndex = 0;
  let intervalId: ReturnType<typeof setInterval>;
  let isTransitioning = false;

  function setupCarousel() {
    const carousel = document.querySelector('.carousel') as HTMLElement;
    const slides = document.querySelectorAll('.carousel-slide') as NodeListOf<HTMLElement>;
    const indicators = document.querySelectorAll('.carousel-indicator') as NodeListOf<HTMLElement>;
    const prevButton = document.querySelector('.prev-slide') as HTMLButtonElement;
    const nextButton = document.querySelector('.next-slide') as HTMLButtonElement;

    if (!carousel || !slides.length || !indicators.length || !prevButton || !nextButton) {
      console.error('Carousel elements not found');
      return;
    }

    function showSlide(index: number) {
      if (isTransitioning) return;
      isTransitioning = true;

      slides.forEach((slide, i) => {
        slide.classList.toggle('opacity-100', i === index);
        slide.classList.toggle('opacity-0', i !== index);
        slide.setAttribute('aria-hidden', (i !== index).toString());
      });

      indicators.forEach((indicator, i) => {
        indicator.classList.toggle('w-4', i === index);
        indicator.classList.toggle('w-2', i !== index);
        indicator.classList.toggle('bg-white', i === index);
        indicator.classList.toggle('bg-white/50', i !== index);
        indicator.setAttribute('aria-selected', (i === index).toString());
      });

      currentIndex = index;
      setTimeout(() => {
        isTransitioning = false;
      }, 500);
    }

    function nextSlide() {
      showSlide((currentIndex + 1) % slides.length);
    }

    function prevSlide() {
      showSlide((currentIndex - 1 + slides.length) % slides.length);
    }

    // Touch events
    let touchStartX = 0;
    let touchStartY = 0;

    carousel.addEventListener('touchstart', (e) => {
      touchStartX = e.touches[0].clientX;
      touchStartY = e.touches[0].clientY;
    });

    carousel.addEventListener('touchend', (e) => {
      const touchEndX = e.changedTouches[0].clientX;
      const touchEndY = e.changedTouches[0].clientY;

      const deltaX = touchStartX - touchEndX;
      const deltaY = touchStartY - touchEndY;

      // Only handle horizontal swipes
      if (Math.abs(deltaX) > Math.abs(deltaY) && Math.abs(deltaX) > 50) {
        if (deltaX > 0) {
          nextSlide();
        } else {
          prevSlide();
        }
      }
    });

    function startAutoplay() {
      stopAutoplay();
      intervalId = setInterval(nextSlide, 5000);
    }

    function stopAutoplay() {
      if (intervalId) clearInterval(intervalId);
    }

    // Event listeners
    prevButton.addEventListener('click', () => {
      prevSlide();
      stopAutoplay();
      startAutoplay();
    });

    nextButton.addEventListener('click', () => {
      nextSlide();
      stopAutoplay();
      startAutoplay();
    });

    indicators.forEach((indicator, index) => {
      indicator.addEventListener('click', () => {
        showSlide(index);
        stopAutoplay();
        startAutoplay();
      });
    });

    carousel.addEventListener('mouseenter', stopAutoplay);
    carousel.addEventListener('mouseleave', startAutoplay);
    carousel.addEventListener('focusin', stopAutoplay);
    carousel.addEventListener('focusout', startAutoplay);

    // Initialize
    startAutoplay();

    // Cleanup function
    return () => {
      stopAutoplay();
      carousel.removeEventListener('mouseenter', stopAutoplay);
      carousel.removeEventListener('mouseleave', startAutoplay);
      carousel.removeEventListener('focusin', stopAutoplay);
      carousel.removeEventListener('focusout', startAutoplay);
    };
  }

  // Setup carousel when the DOM is loaded
  let cleanup: (() => void) | undefined;

  document.addEventListener('DOMContentLoaded', () => {
    cleanup = setupCarousel();
  });

  // Handle Astro page transitions
  document.addEventListener('astro:page-load', () => {
    if (cleanup) cleanup();
    cleanup = setupCarousel();
  });

  // Cleanup before page transitions
  document.addEventListener('astro:before-swap', () => {
    if (cleanup) cleanup();
  });
</script>
