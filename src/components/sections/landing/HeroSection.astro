---
// Import required components and types
import type { ImageMetadata } from 'astro';
import { Image } from 'astro:assets';

// Define props
interface HeroSectionProps {
  title: string;
  subTitle?: string;
  primaryBtn?: string;
  primaryBtnURL?: string;
  secondaryBtn?: string;
  secondaryBtnURL?: string;
  images: Array<{ src: ImageMetadata; alt: string }>;
}

const { title, subTitle, primaryBtn, primaryBtnURL, secondaryBtn, secondaryBtnURL, images } = Astro.props;

if (!images || images.length === 0) {
  throw new Error('At least one image is required for the carousel');
}
---

<section class="hero-section">
  <h1>{title}</h1>
  {subTitle && <p>{subTitle}</p>}

  {primaryBtn && primaryBtnURL && (
    <a href={primaryBtnURL} class="primary-cta">{primaryBtn}</a>
  )}

  {secondaryBtn && secondaryBtnURL && (
    <a href={secondaryBtnURL} class="secondary-cta">{secondaryBtn}</a>
  )}

  <div class="carousel">
    {images.map((image, index) => (
      <div key={`image-${index}`} class="carousel-slide">
        <Image
          src={image.src}
          alt={image.alt}
          class="carousel-image"
          loading="lazy"
          draggable={false}
        />
      </div>
    ))}
    <button class="carousel-prev">&#10094;</button>
    <button class="carousel-next">&#10095;</button>
  </div>

  <div class="carousel-indicators">
    {images.map((_, index) => (
      <span key={`indicator-${index}`} class="carousel-indicator" data-index={index}></span>
    ))}
  </div>
</section>

<style>
  .hero-section {
    text-align: center;
    padding: 2rem;
  }

  .carousel {
    position: relative;
    max-width: 800px;
    margin: 0 auto;
    overflow: hidden;
  }

  .carousel-slide {
    display: none;
    width: 100%;
  }

  .carousel-slide.active {
    display: block;
  }

  .carousel-image {
    width: 100%;
    height: auto;
  }

  .carousel-prev,
  .carousel-next {
    position: absolute;
    top: 50%;
    transform: translateY(-50%);
    background-color: rgba(0, 0, 0, 0.5);
    color: white;
    border: none;
    padding: 10px;
    cursor: pointer;
  }

  .carousel-prev {
    left: 10px;
  }

  .carousel-next {
    right: 10px;
  }

  .carousel-indicators {
    display: flex;
    justify-content: center;
    margin-top: 10px;
  }

  .carousel-indicator {
    width: 10px;
    height: 10px;
    background-color: #bbb;
    border-radius: 50%;
    margin: 0 5px;
    cursor: pointer;
  }

  .carousel-indicator.active {
    background-color: #333;
  }
</style>

<script>
  let currentIndex = 0;
  let intervalId: number | undefined;

  const carouselSlides = document.querySelectorAll('.carousel-slide');
  const carouselIndicators = document.querySelectorAll('.carousel-indicator');

  function showSlide(index: number) {
    carouselSlides.forEach((slide, i) => {
      slide.classList.toggle('active', i === index);
    });

    carouselIndicators.forEach((indicator, i) => {
      indicator.classList.toggle('active', i === index);
    });
  }

  function nextSlide() {
    currentIndex = (currentIndex + 1) % carouselSlides.length;
    showSlide(currentIndex);
  }

  function prevSlide() {
    currentIndex = (currentIndex - 1 + carouselSlides.length) % carouselSlides.length;
    showSlide(currentIndex);
  }

  function startAutoplay() {
    intervalId = setInterval(nextSlide, 5000) as unknown as number;
  }

  function stopAutoplay() {
    if (intervalId) {
      clearInterval(intervalId);
      intervalId = undefined;
    }
  }

  // Initialize carousel
  document.addEventListener('DOMContentLoaded', () => {
    showSlide(currentIndex);
    startAutoplay();

    // Add event listeners for buttons
    document.querySelector('.carousel-prev')?.addEventListener('click', () => {
      prevSlide();
      stopAutoplay();
      startAutoplay();
    });

    document.querySelector('.carousel-next')?.addEventListener('click', () => {
      nextSlide();
      stopAutoplay();
      startAutoplay();
    });

    // Add event listeners for indicators
    carouselIndicators.forEach((indicator, index) => {
      indicator.addEventListener('click', () => {
        currentIndex = index;
        showSlide(currentIndex);
        stopAutoplay();
        startAutoplay();
      });
    });

    // Pause autoplay on hover
    document.querySelector('.carousel')?.addEventListener('mouseenter', stopAutoplay);
    document.querySelector('.carousel')?.addEventListener('mouseleave', startAutoplay);
  });
</script>