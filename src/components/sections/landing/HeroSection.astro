
// Import the necessary dependencies
// import { Image } from "astro:assets";
// import PrimaryCTA from "@components/ui/buttons/PrimaryCTA.astro";
// import SecondaryCTA from "@components/ui/buttons/SecondaryCTA.astro";
// import ReviewComponent from "@components/ui/blocks/ReviewComponent.astro";

// // Define props from Astro
// const {
//   title,
//   subTitle,
//   primaryBtn,
//   primaryBtnURL,
//   secondaryBtn,
//   secondaryBtnURL,
//   withReview,
//   avatars,
//   starCount,
//   rating,
//   reviews,
//   src,
//   alt
// } = Astro.props;

// // Define TypeScript interface for props
// interface Props {
//   title: string;
//   subTitle?: string;
//   primaryBtn?: string;
//   primaryBtnURL?: string;
//   secondaryBtn?: string;
//   secondaryBtnURL?: string;
//   withReview?: boolean;
//   avatars?: Array<string>;
//   starCount?: number;
//   rating?: string;
//   reviews?: string;
//   src?: any;
//   alt?: string;
// }
// ---

// <!-- Defining a grid container that holds all the content -->
// <section
//   class="mx-auto grid max-w-[85rem] gap-4 px-4 py-14 sm:px-6 md:grid-cols-2 md:items-center md:gap-8 lg:px-8 2xl:max-w-full"
// >
//   <!-- Title and description -->
//   <div>
//     <!-- Each h1 and p tag renders a portion of the title and subTitle defined above -->
//     <h1
//       class="block text-balance text-3xl font-bold tracking-tight text-neutral-800 dark:text-neutral-200 sm:text-4xl lg:text-6xl lg:leading-tight"
//     >
//       <!-- About Fragment: https://docs.astro.build/en/basics/astro-syntax/#fragments -->
//       <Fragment set:html={title} />
//     </h1>
//     {subTitle &&
//     <p
//       class="mt-3 text-pretty text-lg leading-relaxed text-neutral-700 dark:text-neutral-400 lg:w-4/5"
//     >
//       {subTitle}
//     </p>
//   }
//     <!-- Action Button Section: This section includes two CTAs with their own styles and URL -->
//     <div class="mt-7 grid w-full gap-3 sm:inline-flex">
//       {primaryBtn && 
//       <PrimaryCTA title={primaryBtn} url={primaryBtnURL} />
//       }
//       {secondaryBtn && 
//       <SecondaryCTA title={secondaryBtn} url={secondaryBtnURL} />
//       }
//     </div>

//     <!-- Review Section: This section presents avatars, review ratings and the number of reviews -->
//     { withReview ? (
//     <ReviewComponent avatars={avatars} starCount={starCount} rating={rating} reviews={reviews} />
//     ) : "" }

//   </div>
//   <!-- Hero Image Section -->
//   <div class="flex w-full">
//       <div class="top-12 overflow-hidden">
// 	{src && alt &&
// 	<Image
//         src={src}
//         alt={alt}
//         class="h-full w-full scale-110 object-cover object-center"
//         draggable={"false"}
//         loading={"eager"}
//         format={"avif"}
// 	 />
// 	}
//     </div>
//   </div>
// </section>



---
// Import the necessary dependencies
import { Image } from "astro:assets";
import PrimaryCTA from "@components/ui/buttons/PrimaryCTA.astro";
import SecondaryCTA from "@components/ui/buttons/SecondaryCTA.astro";
import ReviewComponent from "@components/ui/blocks/ReviewComponent.astro";

// Define TypeScript interface for props
interface Props {
  title: string;
  subTitle?: string;
  primaryBtn?: string;
  primaryBtnURL?: string;
  secondaryBtn?: string;
  secondaryBtnURL?: string;
  withReview?: boolean;
  avatars?: Array<string>;
  starCount?: number;
  rating?: string;
  reviews?: string;
  images: Array<{ src: any; alt: string }>;  // Array of images for carousel
}

// Get all props
const {
  title,
  subTitle,
  primaryBtn,
  primaryBtnURL,
  secondaryBtn,
  secondaryBtnURL,
  withReview,
  avatars,
  starCount,
  rating,
  reviews,
  images
} = Astro.props;
---

<section
  class="mx-auto grid max-w-[85rem] gap-4 px-4 py-14 sm:px-6 md:grid-cols-2 md:items-center md:gap-8 lg:px-8 2xl:max-w-full"
>
  <!-- Left column with text content -->
  <div>
    <h1
      class="block text-balance text-3xl font-bold tracking-tight text-neutral-800 dark:text-neutral-200 sm:text-4xl lg:text-6xl lg:leading-tight"
    >
      <Fragment set:html={title} />
    </h1>
    
    {subTitle &&
      <p
        class="mt-3 text-pretty text-lg leading-relaxed text-neutral-700 dark:text-neutral-400 lg:w-4/5"
      >
        {subTitle}
      </p>
    }

    <div class="mt-7 grid w-full gap-3 sm:inline-flex">
      {primaryBtn && 
        <PrimaryCTA title={primaryBtn} url={primaryBtnURL} />
      }
      {secondaryBtn && 
        <SecondaryCTA title={secondaryBtn} url={secondaryBtnURL} />
      }
    </div>

    {withReview && 
      <ReviewComponent 
        avatars={avatars} 
        starCount={starCount} 
        rating={rating} 
        reviews={reviews} 
      />
    }
  </div>

  <!-- Right column with image carousel -->
  <div class="relative flex w-full overflow-hidden rounded-lg">
    <div class="carousel relative h-[400px] w-full">
      {images.map((image, index) => (
        <div 
          class="carousel-slide absolute h-full w-full opacity-0 transition-all duration-500"
          data-index={index}
        >
          <Image
            src={image.src}
            alt={image.alt}
            class="h-full w-full scale-110 object-cover object-center"
            draggable={"false"}
            loading={index === 0 ? "eager" : "lazy"}
            format="avif"
          />
        </div>
      ))}
    </div>

    <!-- Navigation arrows -->
    <button 
      class="prev-slide absolute left-2 top-1/2 -translate-y-1/2 rounded-full bg-white/80 p-2 text-gray-800 shadow-lg hover:bg-white"
      aria-label="Previous slide"
    >
      <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7" />
      </svg>
    </button>

    <button 
      class="next-slide absolute right-2 top-1/2 -translate-y-1/2 rounded-full bg-white/80 p-2 text-gray-800 shadow-lg hover:bg-white"
      aria-label="Next slide"
    >
      <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
      </svg>
    </button>

    <!-- Slide indicators -->
    <div class="absolute bottom-4 left-1/2 flex -translate-x-1/2 gap-2">
      {images.map((_, index) => (
        <button
          class="carousel-indicator h-2 w-2 rounded-full bg-white/50 transition-all hover:bg-white/80"
          data-index={index}
          aria-label={`Go to slide ${index + 1}`}
        />
      ))}
    </div>
  </div>
</section>

<!-- Carousel functionality -->
<script>
  function setupCarousel() {
    const carousel = document.querySelector('.carousel');
    const slides = document.querySelectorAll('.carousel-slide');
    const indicators = document.querySelectorAll('.carousel-indicator');
    const prevButton = document.querySelector('.prev-slide');
    const nextButton = document.querySelector('.next-slide');
    
    let currentIndex = 0;
    let intervalId: number | undefined;

    function showSlide(index: number) {
      slides.forEach((slide) => {
        slide.classList.remove('opacity-100');
        slide.classList.add('opacity-0');
      });
      indicators.forEach((indicator) => {
        indicator.classList.remove('w-4', 'bg-white');
        indicator.classList.add('w-2', 'bg-white/50');
      });

      slides[index].classList.remove('opacity-0');
      slides[index].classList.add('opacity-100');
      indicators[index].classList.remove('w-2', 'bg-white/50');
      indicators[index].classList.add('w-4', 'bg-white');
    }

    function nextSlide() {
      currentIndex = (currentIndex + 1) % slides.length;
      showSlide(currentIndex);
    }

    function prevSlide() {
      currentIndex = (currentIndex - 1 + slides.length) % slides.length;
      showSlide(currentIndex);
    }

    function startAutoplay() {
      intervalId = setInterval(nextSlide, 5000);
    }

    function stopAutoplay() {
      if (intervalId) {
        clearInterval(intervalId);
      }
    }

    // Event listeners
    prevButton?.addEventListener('click', () => {
      prevSlide();
      stopAutoplay();
      startAutoplay();
    });

    nextButton?.addEventListener('click', () => {
      nextSlide();
      stopAutoplay();
      startAutoplay();
    });

    indicators.forEach((indicator, index) => {
      indicator.addEventListener('click', () => {
        currentIndex = index;
        showSlide(currentIndex);
        stopAutoplay();
        startAutoplay();
      });
    });

    carousel?.addEventListener('mouseenter', stopAutoplay);
    carousel?.addEventListener('mouseleave', startAutoplay);

    // Initialize
    showSlide(0);
    startAutoplay();
  }

  // Setup carousel when the DOM is loaded
  document.addEventListener('DOMContentLoaded', setupCarousel);

  // Handle Astro page transitions if using View Transitions
  document.addEventListener('astro:page-load', setupCarousel);
</script>