---
// Import required components and types
import type { ImageMetadata } from 'astro';
import { Image } from 'astro:assets';

// Define props
interface HeroSectionProps {
  title: string;
  subTitle?: string;
  primaryBtn?: string;
  primaryBtnURL?: string;
  secondaryBtn?: string;
  secondaryBtnURL?: string;
  images: Array<{ src: ImageMetadata; alt: string }>;
}

const { title, subTitle, primaryBtn, primaryBtnURL, secondaryBtn, secondaryBtnURL, images } = Astro.props;

if (!images || images.length === 0) {
  throw new Error('At least one image is required for the carousel');
}
---

<section class="hero-section">
  <h1>{title}</h1>
  {subTitle && <p>{subTitle}</p>}

  {primaryBtn && primaryBtnURL && (
    <a href={primaryBtnURL} class="primary-cta">{primaryBtn}</a>
  )}

  {secondaryBtn && secondaryBtnURL && (
    <a href={secondaryBtnURL} class="secondary-cta">{secondaryBtn}</a>
  )}

  <div class="carousel">
    {images.map((image, index) => (
      <div key={index} class="carousel-image-container">
        <Image
          src={image.src}
          alt={image.alt}
          class="carousel-image"
          loading="lazy"
          draggable={false}
        />
      </div>
    ))}
  </div>
</section>

<script>
  let currentIndex = 0;
  let intervalId;
  let isTransitioning = false;

  function setupCarousel() {
    const carousel = document.querySelector('.carousel');
    const slides = document.querySelectorAll('.carousel-slide');
    const indicators = document.querySelectorAll('.carousel-indicator');
    const prevButton = document.querySelector('.prev-slide');
    const nextButton = document.querySelector('.next-slide');

    if (!carousel || slides.length === 0 || indicators.length === 0 || !prevButton || !nextButton) {
      console.error('Carousel elements not found');
      return;
    }

    const showSlide = (index) => {
      if (isTransitioning) return;
      isTransitioning = true;

      slides.forEach((slide, i) => {
        slide.classList.toggle('opacity-100', i === index);
        slide.classList.toggle('opacity-0', i !== index);
        slide.setAttribute('aria-hidden', (i !== index).toString());
      });

      indicators.forEach((indicator, i) => {
        indicator.classList.toggle('w-4', i === index);
        indicator.classList.toggle('w-2', i !== index);
        indicator.classList.toggle('bg-white', i === index);
        indicator.classList.toggle('bg-white/50', i !== index);
        indicator.setAttribute('aria-selected', (i === index).toString());
      });

      currentIndex = index;
      setTimeout(() => {
        isTransitioning = false;
      }, 500);
    };

    const nextSlide = () => {
      showSlide((currentIndex + 1) % slides.length);
    };

    const prevSlide = () => {
      showSlide((currentIndex - 1 + slides.length) % slides.length);
    };

    let touchStartX = 0;
    let touchStartY = 0;

    carousel.addEventListener('touchstart', (e) => {
      const touchEvent = e as TouchEvent; // Cast to TouchEvent
      touchStartX = touchEvent.touches[0].clientX;
      touchStartY = touchEvent.touches[0].clientY;
    });

    carousel.addEventListener('touchend', (e) => {
      const touchEvent = e as TouchEvent; // Cast to TouchEvent
      const touchEndX = touchEvent.changedTouches[0].clientX;
      const touchEndY = touchEvent.changedTouches[0].clientY;
      const deltaX = touchStartX - touchEndX;
      const deltaY = touchStartY - touchEndY;

      if (Math.abs(deltaX) > Math.abs(deltaY) && Math.abs(deltaX) > 50) {
        if (deltaX > 0) nextSlide();
        else prevSlide();
      }
    });

    const startAutoplay = () => {
      stopAutoplay();
      intervalId = setInterval(nextSlide, 5000);
    };

    const stopAutoplay = () => {
      if (intervalId) {
        clearInterval(intervalId);
        intervalId = undefined;
      }
    };

    prevButton.addEventListener('click', () => {
      prevSlide();
      stopAutoplay();
      startAutoplay();
    });

    nextButton.addEventListener('click', () => {
      nextSlide();
      stopAutoplay();
      startAutoplay();
    });

    indicators.forEach((indicator, index) => {
      indicator.addEventListener('click', () => {
        showSlide(index);
        stopAutoplay();
        startAutoplay();
      });
    });

    carousel.addEventListener('mouseenter', stopAutoplay);
    carousel.addEventListener('mouseleave', startAutoplay);
    carousel.addEventListener('focusin', stopAutoplay);
    carousel.addEventListener('focusout', startAutoplay);

    startAutoplay();

    return () => {
      stopAutoplay();
      carousel.removeEventListener('mouseenter', stopAutoplay);
      carousel.removeEventListener('mouseleave', startAutoplay);
      carousel.removeEventListener('focusin', stopAutoplay);
      carousel.removeEventListener('focusout', startAutoplay);
    };
  }

  document.addEventListener('DOMContentLoaded', () => {
    setupCarousel();
  });
</script>